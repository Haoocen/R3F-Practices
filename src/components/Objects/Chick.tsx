/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

/* eslint-disable @typescript-eslint/explicit-module-boundary-types */
/* eslint-disable @typescript-eslint/no-unused-vars */

import * as THREE from "three";
import React, { useRef, useState } from "react";
import { useGLTF, useAnimations } from "drei";

import { GLTF } from "three/examples/jsm/loaders/GLTFLoader";
import { useFrame } from "react-three-fiber";

const MODEL_PATH = `${process.env.PUBLIC_URL}/assets/objects/chick.gltf`;

type GLTFResult = GLTF & {
    nodes: {
        Icosphere_1: THREE.SkinnedMesh;
        Icosphere_2: THREE.SkinnedMesh;
        Bone: THREE.Bone;
    };
    materials: {
        ["Material.001"]: THREE.MeshStandardMaterial;
        ["Material.002"]: THREE.MeshStandardMaterial;
    };
};

export default function Model(props: JSX.IntrinsicElements["group"]) {
    const group = useRef<THREE.Group>() as React.MutableRefObject<THREE.Group>;
    const { nodes, animations } = useGLTF(MODEL_PATH) as GLTFResult;
    const { actions, names } = useAnimations(animations, group);

    const [moving, setMoving] = useState(false);

    const walk = () => {
        actions[names[0]].reset().fadeIn(0.5).play();
        setMoving(true);
        return () => actions[names[0]].fadeOut(0.5);
    };

    useFrame(() => {
        if (group.current && moving) {
            group.current.position.x += 0.2;
        }
    });
    return (
        <group ref={group} {...props} dispose={null} onClick={walk} castShadow>
            <group position={[-0.7, 0.08, -0.03]} scale={[1.32, 1.32, 1.32]}>
                <primitive object={nodes.Bone} />
                <skinnedMesh
                    material={nodes.Icosphere_1.material}
                    geometry={nodes.Icosphere_1.geometry}
                    skeleton={nodes.Icosphere_1.skeleton}
                />
                <skinnedMesh
                    material={nodes.Icosphere_2.material}
                    geometry={nodes.Icosphere_2.geometry}
                    skeleton={nodes.Icosphere_2.skeleton}
                />
            </group>
        </group>
    );
}
useGLTF.preload(MODEL_PATH);
