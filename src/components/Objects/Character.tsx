/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { useGLTF } from "drei";

import { GLTF } from "three/examples/jsm/loaders/GLTFLoader";
const MODEL_PATH = `${process.env.PUBLIC_URL}/assets/objects/Character.gltf`;

type GLTFResult = GLTF & {
    nodes: {
        Sphere169: THREE.SkinnedMesh;
        Sphere169_1: THREE.SkinnedMesh;
        Sphere169_2: THREE.SkinnedMesh;
        Sphere176: THREE.SkinnedMesh;
        Sphere176_1: THREE.SkinnedMesh;
        Sphere172: THREE.SkinnedMesh;
        Sphere172_1: THREE.SkinnedMesh;
        Cylinder023: THREE.SkinnedMesh;
        Cube007: THREE.Mesh;
        Cylinder036: THREE.Mesh;
        Cylinder035: THREE.Mesh;
        Cylinder031: THREE.Mesh;
        Sphere053: THREE.Mesh;
        Sphere052: THREE.Mesh;
        Sphere049: THREE.Mesh;
        Sphere048: THREE.Mesh;
        Cone002_1: THREE.Mesh;
        Cone002_2: THREE.Mesh;
        NurbsPath003: THREE.Mesh;
        NurbsPath002: THREE.Mesh;
        Sphere063: THREE.Mesh;
        Sphere062: THREE.Mesh;
        Bone002: THREE.Bone;
        Bone004: THREE.Bone;
        Bone003: THREE.Bone;
        Bone003_1: THREE.Bone;
        Bone: THREE.Bone;
    };
    materials: {
        red: THREE.MeshStandardMaterial;
        Material: THREE.MeshStandardMaterial;
        skin: THREE.MeshStandardMaterial;
        black: THREE.MeshStandardMaterial;
        yellow: THREE.MeshStandardMaterial;
        green: THREE.MeshStandardMaterial;
        white: THREE.MeshStandardMaterial;
    };
};

export default function Model(props: JSX.IntrinsicElements["group"]) {
    const group = useRef<THREE.Group>();
    const { nodes, materials } = useGLTF(MODEL_PATH) as GLTFResult;
    return (
        <group ref={group} {...props} dispose={null}>
            <group
                position={[-1.1, 1.59, 18.75]}
                rotation={[0, 0.48, Math.PI]}
                scale={[1.42, 1.42, 1.42]}
            >
                <primitive object={nodes.Bone002} />
                <primitive object={nodes.Bone004} />
                <skinnedMesh
                    material={materials.red}
                    geometry={nodes.Sphere169.geometry}
                    skeleton={nodes.Sphere169.skeleton}
                />
                <skinnedMesh
                    material={materials.white}
                    geometry={nodes.Sphere169_1.geometry}
                    skeleton={nodes.Sphere169_1.skeleton}
                />
                <skinnedMesh
                    material={materials.skin}
                    geometry={nodes.Sphere169_2.geometry}
                    skeleton={nodes.Sphere169_2.skeleton}
                />
            </group>
            <group
                position={[2.61, 9.39, 17.14]}
                rotation={[-0.44, 0.41, 1.6]}
                scale={[2.37, 2.37, 2.37]}
            >
                <primitive object={nodes.Bone003} />
                <skinnedMesh
                    material={materials.green}
                    geometry={nodes.Sphere176.geometry}
                    skeleton={nodes.Sphere176.skeleton}
                />
                <skinnedMesh
                    material={materials.white}
                    geometry={nodes.Sphere176_1.geometry}
                    skeleton={nodes.Sphere176_1.skeleton}
                />
            </group>
            <group
                position={[-3.23, 10.39, 20.52]}
                rotation={[-0.01, 0.67, -1.88]}
                scale={[2.37, 2.37, 2.37]}
            >
                <primitive object={nodes.Bone003_1} />
                <skinnedMesh
                    material={materials.green}
                    geometry={nodes.Sphere172.geometry}
                    skeleton={nodes.Sphere172.skeleton}
                />
                <skinnedMesh
                    material={materials.white}
                    geometry={nodes.Sphere172_1.geometry}
                    skeleton={nodes.Sphere172_1.skeleton}
                />
            </group>
            <group
                position={[3.4, 14.24, 16.55]}
                rotation={[0.08, 0.32, 0.13]}
                scale={[-0.57, 0.57, 0.57]}
            >
                <primitive object={nodes.Bone} />
                <skinnedMesh
                    material={materials.skin}
                    geometry={nodes.Cylinder023.geometry}
                    skeleton={nodes.Cylinder023.skeleton}
                />
            </group>
            <mesh
                material={materials.Material}
                geometry={nodes.Cube007.geometry}
                position={[-0.36, 12.43, 19.53]}
                rotation={[-0.2, 0, 0]}
                scale={[0.11, 0.24, 0.1]}
            />
            <mesh
                material={materials.skin}
                geometry={nodes.Cylinder036.geometry}
                position={[0.93, 12.45, 18.3]}
                rotation={[Math.PI / 2, -1.57, 0]}
                scale={[0.41, 0.1, 0.41]}
            />
            <mesh
                material={materials.skin}
                geometry={nodes.Cylinder035.geometry}
                position={[-1.63, 12.45, 18.3]}
                rotation={[Math.PI / 2, -1.57, 0]}
                scale={[0.41, 0.1, 0.41]}
            />
            <mesh
                material={materials.black}
                geometry={nodes.Cylinder031.geometry}
                position={[-0.36, 12, 19.39]}
                rotation={[1.94, 0, 0]}
                scale={[0.3, 0.1, 0.32]}
            />
            <mesh
                material={materials.black}
                geometry={nodes.Sphere053.geometry}
                position={[0.11, 12.7, 19.47]}
                rotation={[-0.17, 0.44, 0]}
                scale={[-0.15, -0.15, 0.05]}
            />
            <mesh
                material={materials.black}
                geometry={nodes.Sphere052.geometry}
                position={[-0.82, 12.7, 19.47]}
                rotation={[-0.17, -0.43, -0.07]}
                scale={[-0.15, -0.15, 0.05]}
            />
            <mesh
                material={materials.skin}
                geometry={nodes.Sphere049.geometry}
                position={[-0.36, 12.47, 18.3]}
                scale={[1.29, 1.29, 1.29]}
            />
            <mesh
                material={materials.yellow}
                geometry={nodes.Sphere048.geometry}
                position={[-0.36, 12.83, 18.03]}
                rotation={[-0.9, 0, 0]}
                scale={[1.5, 1.34, 1.37]}
            />
            <group
                position={[-0.3, 8.93, 18.25]}
                rotation={[0, 0.38, 0]}
                scale={[3.56, 3.56, 3.56]}
            >
                <mesh
                    material={materials.green}
                    geometry={nodes.Cone002_1.geometry}
                />
                <mesh
                    material={materials.white}
                    geometry={nodes.Cone002_2.geometry}
                />
            </group>
            <mesh
                material={materials.black}
                geometry={nodes.NurbsPath003.geometry}
                position={[0.69, 9.21, 19.46]}
                rotation={[-0.54, 0.33, -1.38]}
                scale={[0.53, 0.32, 0.34]}
            />
            <mesh
                material={materials.black}
                geometry={nodes.NurbsPath002.geometry}
                position={[-0.17, 9.21, 19.81]}
                rotation={[-0.54, 0.33, -1.38]}
                scale={[0.53, 0.32, 0.34]}
            />
            <mesh
                material={materials.white}
                geometry={nodes.Sphere063.geometry}
                position={[-0.36, 9.6, 18.09]}
                rotation={[0.24, 0.37, -0.09]}
                scale={[1.39, 0.95, 1.13]}
            />
            <mesh
                material={materials.white}
                geometry={nodes.Sphere062.geometry}
                position={[-0.51, 10.99, 17.68]}
                rotation={[0.29, 0.36, 3.04]}
                scale={[1.42, 1.78, 1.61]}
            />
        </group>
    );
}

useGLTF.preload(MODEL_PATH);
