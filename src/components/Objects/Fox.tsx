/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { useEffect, useRef } from "react";
import { useGLTF, useAnimations } from "drei";
import { GLTF } from "three/examples/jsm/loaders/GLTFLoader";
import { GroupProps } from "react-three-fiber";

const MODEL_PATH = `${process.env.PUBLIC_URL}/assets/objects/Fox/glTF/Fox.gltf`;

type GLTFResult = GLTF & {
    nodes: {
        fox: THREE.SkinnedMesh;
        _rootJoint: THREE.Bone;
    };
    materials: {
        fox_material: THREE.MeshStandardMaterial;
    };
};

// type ActionName = "Survey" | "Walk" | "Run";
// type GLTFActions = Record<ActionName, THREE.AnimationAction>;

interface IProps extends GroupProps {
    didLoadOptions?: (options: string[]) => void;
    selectedAnimation?: string;
}

// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
export default function Model(props: IProps) {
    const group = useRef<THREE.Group>() as React.MutableRefObject<THREE.Group>;
    const { nodes, materials, animations } = useGLTF(MODEL_PATH) as GLTFResult;
    const { actions, names } = useAnimations(animations, group);

    useEffect(() => {
        props.didLoadOptions?.(names);
    }, [names]);

    useEffect(() => {
        for (const a of Object.values(actions)) {
            a.fadeIn(0.5).stop();
        }
        if (
            props.selectedAnimation &&
            names.includes(props.selectedAnimation)
        ) {
            console.log(props.selectedAnimation);
            actions[props.selectedAnimation].reset().fadeIn(0.5).play();
        } else {
        }
    }, [props.selectedAnimation]);

    return (
        <group ref={group} {...props} dispose={null}>
            <primitive object={nodes._rootJoint} />
            <skinnedMesh
                geometry={nodes.fox.geometry}
                material={materials.fox_material}
                skeleton={nodes.fox.skeleton}
            />
        </group>
    );
}

useGLTF.preload(MODEL_PATH);
