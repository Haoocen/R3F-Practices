[{"/Users/haocen/Documents/ThreeJS/explore/src/index.tsx":"1","/Users/haocen/Documents/ThreeJS/explore/src/reportWebVitals.ts":"2","/Users/haocen/Documents/ThreeJS/explore/src/App.tsx":"3","/Users/haocen/Documents/ThreeJS/explore/src/pages/Home.tsx":"4","/Users/haocen/Documents/ThreeJS/explore/src/pages/Example01.tsx":"5","/Users/haocen/Documents/ThreeJS/explore/src/pages/Example02.tsx":"6","/Users/haocen/Documents/ThreeJS/explore/src/components/DefaultLights.tsx":"7","/Users/haocen/Documents/ThreeJS/explore/src/components/PlanAndAxis.tsx":"8","/Users/haocen/Documents/ThreeJS/explore/src/pages/examplesUtil.tsx":"9","/Users/haocen/Documents/ThreeJS/explore/src/pages/Example03.tsx":"10","/Users/haocen/Documents/ThreeJS/explore/src/pages/Example04.tsx":"11","/Users/haocen/Documents/ThreeJS/explore/src/components/Layouts/Space.tsx":"12","/Users/haocen/Documents/ThreeJS/explore/src/pages/Example05.tsx":"13","/Users/haocen/Documents/ThreeJS/explore/src/components/Layouts/Flex.tsx":"14","/Users/haocen/Documents/ThreeJS/explore/src/pages/Snippet01.tsx":"15"},{"size":500,"mtime":1609631601664,"results":"16","hashOfConfig":"17"},{"size":425,"mtime":1609965483742,"results":"18","hashOfConfig":"17"},{"size":635,"mtime":1609959276970,"results":"19","hashOfConfig":"17"},{"size":844,"mtime":1609965484544,"results":"20","hashOfConfig":"17"},{"size":1486,"mtime":1609965483854,"results":"21","hashOfConfig":"17"},{"size":2836,"mtime":1609965483914,"results":"22","hashOfConfig":"17"},{"size":456,"mtime":1609965483786,"results":"23","hashOfConfig":"17"},{"size":922,"mtime":1609965483815,"results":"24","hashOfConfig":"17"},{"size":984,"mtime":1609965484646,"results":"25","hashOfConfig":"17"},{"size":2643,"mtime":1609965483995,"results":"26","hashOfConfig":"17"},{"size":11944,"mtime":1609965484412,"results":"27","hashOfConfig":"17"},{"size":413,"mtime":1609964554197,"results":"28","hashOfConfig":"17"},{"size":2923,"mtime":1609965484487,"results":"29","hashOfConfig":"17"},{"size":201,"mtime":1609955676532,"results":"30","hashOfConfig":"17"},{"size":2118,"mtime":1609965484628,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"1tzsxud",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"34"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"34"},"/Users/haocen/Documents/ThreeJS/explore/src/index.tsx",[],["66","67"],"/Users/haocen/Documents/ThreeJS/explore/src/reportWebVitals.ts",[],"/Users/haocen/Documents/ThreeJS/explore/src/App.tsx",[],"/Users/haocen/Documents/ThreeJS/explore/src/pages/Home.tsx",[],"/Users/haocen/Documents/ThreeJS/explore/src/pages/Example01.tsx",[],"/Users/haocen/Documents/ThreeJS/explore/src/pages/Example02.tsx",[],"/Users/haocen/Documents/ThreeJS/explore/src/components/DefaultLights.tsx",[],"/Users/haocen/Documents/ThreeJS/explore/src/components/PlanAndAxis.tsx",[],"/Users/haocen/Documents/ThreeJS/explore/src/pages/examplesUtil.tsx",[],"/Users/haocen/Documents/ThreeJS/explore/src/pages/Example03.tsx",[],"/Users/haocen/Documents/ThreeJS/explore/src/pages/Example04.tsx",["68","69","70","71"],"import React, {useEffect, useRef, useState} from \"react\";\nimport {Canvas} from \"react-three-fiber\";\nimport {PlaneAndAxis} from \"../components/PlanAndAxis\";\nimport {Button, Container, Slider, Typography} from \"@material-ui/core\";\nimport {AmbientLight, Color, Mesh, PointLight, SpotLight} from \"three\";\nimport {OrbitControls} from \"drei\";\nimport {Color as MaterialColor, ColorPicker} from \"material-ui-color\";\nimport styled from \"styled-components\";\nimport {Space} from \"../components/Layouts/Space\";\nimport {Row, Column} from '../components/Layouts/Flex'\n\nexport const Example04: React.FC = () => {\n    return (\n        <>\n            <AmbientLightDemo/>\n            <Space height={40}/>\n            <PointLightDemo/>\n            <Space height={40}/>\n            <SpotLightDemo/>\n            <Space height={40}/>\n            <DirectionLightDemo/>\n            <Space height={80}/>\n\n            end\n        </>\n    )\n}\n\nconst AmbientLightDemo: React.FC = () => {\n    const [color, setColor] = useState('DBEF81')\n    const [intensity, setIntensity] = useState(1)\n\n    const handleChangeColor = (c: MaterialColor) => {\n        setColor(c.hex)\n    }\n    const handleChangeIntensity = (_: any, value: number | number[]) => {\n        if (typeof value === 'number') {\n            setIntensity(value)\n        }\n    }\n\n    const ambientRef = useRef<AmbientLight>(null)\n\n    useEffect(() => {\n        if (ambientRef.current) {\n            ambientRef.current.color = new Color(+`0x${color}`)\n            ambientRef.current.intensity = intensity\n        }\n    }, [color, intensity])\n\n    return (\n        <>\n            <Container>\n                <Typography variant=\"h3\">Ambient Light - a globally applied light source </Typography>\n                <Typography variant=\"subtitle1\">\n                    An ambient light source is not light from a specific direction, so it does\n                    not contribute to any shadows. It applies globally. Should be used together\n                    with other light sources\n                </Typography>\n                <Space height={16}/>\n                <Row>\n                    <div>\n                        <Typography variant=\"h5\">Color</Typography>\n                        <ColorPicker\n                            onChange={handleChangeColor}\n                            value={`#${color}`}\n                            hideTextfield\n                            disableAlpha\n                        />\n                    </div>\n                    <Space width={24}/>\n                    <div style={{width: 300}}>\n                        <Typography variant=\"h5\">Intensity: {intensity}</Typography>\n                        <Slider\n                            value={intensity}\n                            onChange={handleChangeIntensity}\n                            step={0.1}\n                            min={0}\n                            max={5}\n                        />\n                    </div>\n                </Row>\n            </Container>\n            <Space height={24}/>\n            <Wrapper>\n                <Canvas\n                    colorManagement\n                    shadowMap\n                    camera={{\n                        position: [10, 20, -40]\n                    }}\n                >\n                    <ambientLight intensity={1} color={new Color(+`0x${color}`)} ref={ambientRef}/>\n                    <spotLight position={[20, 20, -10]} intensity={1} castShadow/>\n                    <OrbitControls/>\n                    <Content/>\n                </Canvas>\n            </Wrapper>\n        </>\n\n    )\n}\n\nconst PointLightDemo: React.FC = () => {\n    const [position, setPosition] = useState<[x:number, y:number, z:number]>([10, 20, 0])\n    const ref = useRef<PointLight>(null)\n    const lightSourceRef = useRef<Mesh>(null)\n\n    function animate(step: number) {\n        const deg = Math.PI / 60\n        setPosition(prev => {\n            return [\n                prev[0] * Math.cos(deg) - prev[2] * Math.sin(deg),\n                prev[1],\n                prev[2] * Math.cos(deg) + prev[0] * Math.sin(deg),\n            ]\n        })\n\n        if (step !== 0) {\n            requestAnimationFrame(()=>animate(step-1));\n        }\n    }\n\n    useEffect(() => {\n        if (ref.current) {\n            [\n                ref.current.position.x,\n                ref.current.position.y,\n                ref.current.position.z\n            ] = position\n        }\n\n        if (lightSourceRef.current) {\n            [\n                lightSourceRef.current.position.x,\n                lightSourceRef.current.position.y,\n                lightSourceRef.current.position.z\n            ] = position\n        }\n    }, [position])\n\n\n    const handlePosChange = (pos: 0|1|2, value: number | number[]) => {\n        if (typeof value === 'number') {\n            setPosition(prev => {\n                const temp: [x: number, y: number, z:number] = [prev[0], prev[1], prev[2]]\n                temp[pos] = value\n                return temp\n            })\n        }\n    }\n\n    return (\n        <>\n            <Container>\n                <Typography variant=\"h3\">Point Light - shines in all directions</Typography>\n                <Typography variant=\"subtitle1\">\n                    A good example of a point light is a signal flare fired\n                    in the night sky\n                </Typography>\n                <Space height={16}/>\n                <Row>\n                    <div>\n                        <Typography variant=\"h5\">Rotate 360 deg </Typography>\n                        <Button onClick={() => animate(120)}>Rotate</Button>\n                    </div>\n                    <Space width={24}/>\n                    <div>\n                        <Typography variant=\"h5\">Light Position: {position.map(v => v.toPrecision(2)).toString()} </Typography>\n                        <Column>\n                            <Row style={{width: 300}}>\n                                <Typography variant=\"h5\">x</Typography>\n                                <Space width={8}/>\n                                <Slider\n                                    value={position[0]}\n                                    onChange={\n                                        (_, value) => handlePosChange(0, value)\n                                    }\n                                    step={1}\n                                    min={-30}\n                                    max={30}\n                                />\n                            </Row>\n                            <Row style={{width: 300}}>\n                                <Typography variant=\"h5\">y</Typography>\n                                <Space width={8}/>\n                                <Slider\n                                    value={position[1]}\n                                    onChange={\n                                        (_, value) => handlePosChange(1, value)\n                                    }\n                                    step={1}\n                                    min={0}\n                                    max={40}\n                                />\n                            </Row>\n                            <Row style={{width: 300}}>\n                                <Typography variant=\"h5\">z</Typography>\n                                <Space width={8}/>\n                                <Slider\n                                    value={position[2]}\n                                    onChange={\n                                        (_, value) => handlePosChange(2, value)\n                                    }\n                                    step={1}\n                                    min={-30}\n                                    max={30}\n                                />\n                            </Row>\n                        </Column>\n                    </div>\n                </Row>\n            </Container>\n            <Space height={24}/>\n            <Wrapper>\n                <Canvas\n                    colorManagement\n                    shadowMap\n                    camera={{\n                        position: [10, 20, -40]\n                    }}\n                >\n                    <pointLight position={position} intensity={1} castShadow/>\n                    <OrbitControls/>\n                    <Content/>\n                    <Sphere pos={[20,4,20]}/>\n                    <Sphere pos={[-20,4,20]}/>\n                    <Sphere pos={[20,4,-20]}/>\n                    <Sphere pos={[-20,4,-20]}/>\n                    <ambientLight intensity={1} color='white' />\n\n                    <mesh\n                        position={position}\n                    >\n                        <sphereBufferGeometry attach='geometry' args={[0.5,40,40]}/>\n                        <meshLambertMaterial color='red'/>\n                    </mesh>\n                </Canvas>\n            </Wrapper>\n        </>\n\n    )\n}\n\nconst SpotLightDemo: React.FC = () => {\n\n    const ref = useRef<SpotLight>(null)\n\n    const [distance, setDistance] = useState(25)\n    const [angle, setAngle] = useState(Math.PI / 3)\n\n    useEffect(() => {\n        if (ref.current) {\n            ref.current.distance = distance\n            ref.current.angle = angle\n        }\n    }, [distance, angle])\n\n    return (\n        <>\n            <Container>\n                <Typography variant=\"h3\">Spot Light - the light with a cone effect</Typography>\n                <Typography variant=\"subtitle1\">\n                    A SpotLight is probably one of the lights that you'll use most often (especially\n                    if you want a shadow). You can compare this with a flashlight, or a lantern. This\n                    light has a direction and an angle at which it produces light.\n                </Typography>\n                <Space height={16}/>\n                <Row>\n                    <div>\n                        <Typography variant=\"h5\">Distance {distance}</Typography>\n                        <Column>\n                            <Row style={{width: 300}}>\n                                <Typography variant=\"h5\">x</Typography>\n                                <Space width={8}/>\n                                <Slider\n                                    value={distance}\n                                    onChange={\n                                        (_, value) => {\n                                            if (typeof value === 'number') {\n                                                setDistance(value)\n                                            }\n                                        }\n                                    }\n                                    step={1}\n                                    min={15}\n                                    max={50}\n                                />\n                            </Row>\n                        </Column>\n                    </div>\n                    <Space height={16}/>\n                    <div>\n                        <Typography variant=\"h5\">Angle {angle}</Typography>\n                        <Column>\n                            <Row style={{width: 300}}>\n                                <Typography variant=\"h5\">theta</Typography>\n                                <Space width={8}/>\n                                <Slider\n                                    value={angle}\n                                    onChange={\n                                        (_, value) => {\n                                            if (typeof value === 'number') {\n                                                setAngle(value)\n                                            }\n                                        }\n                                    }\n                                    step={0.1}\n                                    min={0}\n                                    max={Math.PI * 0.8}\n                                />\n                            </Row>\n                        </Column>\n                    </div>\n                </Row>\n            </Container>\n            <Space height={24}/>\n            <Wrapper>\n                <Canvas\n                    colorManagement\n                    shadowMap\n                    camera={{\n                        position: [10, 20, -40]\n                    }}\n                >\n                    <spotLight\n                        position={[0,20,0]}\n                        intensity={1}\n                        castShadow\n                        angle={Math.PI / 3}\n                        distance={21}\n                        ref={ref}\n                    />\n                    <Sphere pos={[-10 ,10, -10]}/>\n\n                    <mesh\n                        position={[0, 20, 0]}\n                    >\n                        <sphereBufferGeometry attach='geometry' args={[0.5,40,40]}/>\n                        <meshLambertMaterial color='red'/>\n                    </mesh>\n                    <ambientLight intensity={0.5}/>\n                    <OrbitControls/>\n                    <Content/>\n                </Canvas>\n            </Wrapper>\n        </>\n\n    )\n}\n\n\nconst DirectionLightDemo: React.FC = () => {\n\n    return (\n        <>\n            <Container>\n                <Typography variant=\"h3\">Directional Light - a far away sun-like light source </Typography>\n                <Typography variant=\"subtitle1\">\n                    A Directional Light source can be seen as a light that is very far away. All the light\n                    rays that it sends out are parallel to each other. A good example for this is the sun.\n                    Everything receives the same intensity of light. Only the direction, the color, and the\n                    intensity of the load is used to calculate the colors and shadows.\n                </Typography>\n                <Space height={16}/>\n            </Container>\n            <Space height={24}/>\n            <Wrapper>\n                <Canvas\n                    colorManagement\n                    shadowMap\n                    camera={{\n                        position: [10, 20, -40]\n                    }}\n                >\n                    <Sphere pos={[-10,10, -10]}/>\n                    <directionalLight position={[0, 100, 0]} intensity={1} castShadow />\n                    <OrbitControls/>\n                    <Content/>\n                </Canvas>\n            </Wrapper>\n        </>\n\n    )\n}\n\nconst Content = () => {\n    return (\n        <>\n            <Sphere/>\n            <OrbitControls/>\n            <PlaneAndAxis width={50} length={50} hideAxis/>\n        </>\n    )\n}\n\n\nconst Sphere: React.FC<{pos?: [x: number, y: number, z:number]}> = ({pos}) => {\n    const sphere = useRef<Mesh>(null)\n\n    return (\n        <mesh\n            ref={sphere}\n            position={pos ?? [0, 4, 0]}\n            castShadow\n            onClick={ () => {\n                if (sphere.current ) {\n                    sphere.current.position.x += 10\n                }\n            } }\n        >\n            <sphereGeometry attach='geometry' args={[4, 40, 40]}/>\n            <meshLambertMaterial attach='material' color='white'/>\n        </mesh>\n    )\n}\n\nconst Wrapper = styled(Container)`\n    height: 500px;\n    width: 75%;\n    background-color: rgba(250,250,250);\n    border: 5px solid grey;    \n`\n","/Users/haocen/Documents/ThreeJS/explore/src/components/Layouts/Space.tsx",[],"/Users/haocen/Documents/ThreeJS/explore/src/pages/Example05.tsx",["72","73","74","75","76","77"],"import { Html, OrbitControls } from \"drei\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { Canvas, useFrame } from \"react-three-fiber\";\nimport { Color, Mesh, MeshNormalMaterial, MultiplyBlending } from \"three\";\nimport { DefaultLights } from \"../components/DefaultLights\";\nimport { PlaneAndAxis } from \"../components/PlanAndAxis\";\nimport { Button, Switch, Typography } from \"@material-ui/core\";\nimport { useSpring, animated } from \"react-spring/three\";\n\nexport const Example05: React.FC = () => {\n  return (\n    <>\n      <Canvas\n        colorManagement\n        shadowMap\n        camera={{\n          fov: 45,\n          near: 0.1,\n          far: 1000,\n          position: [10, 35, 50],\n        }}\n      >\n        <DefaultLights />\n        <PlaneAndAxis hideAxis />\n        <OrbitControls />\n        <BasicCubes />\n        <NormalCubes />\n      </Canvas>\n    </>\n  );\n};\n\nconst BasicCubes = () => {\n  return (\n    <>\n      <group position={[0, 2, -8]}>\n        <Html position={[-1, 0, 0]}>Basic transparent</Html>\n        <mesh>\n          <sphereBufferGeometry args={[2, 40, 40]} />\n          <meshBasicMaterial\n            color={new Color(0x777ff)}\n            transparent\n            opacity={0.5}\n          />\n        </mesh>\n      </group>\n      <group position={[0, 2, 0]}>\n        <Html position={[-1, 0, 0]}>Basic</Html>\n        <mesh>\n          <sphereBufferGeometry args={[2, 40, 40]} />\n          <meshBasicMaterial color={new Color(0x777ff)} />\n        </mesh>\n      </group>\n      <group position={[0, 2, 8]}>\n        <Html position={[-1, 0, 0]}>Basic wireframe</Html>\n        <mesh>\n          <sphereBufferGeometry args={[2, 10, 10]} />\n          <meshBasicMaterial\n            color={new Color(0)}\n            wireframe\n            opacity={0.2}\n            transparent\n          />\n        </mesh>\n      </group>\n      <group position={[0, 2, 16]}>\n        <Html position={[-1, 0, 0]}>Basic</Html>\n        <mesh>\n          <sphereBufferGeometry args={[2, 40, 40]} />\n          <meshBasicMaterial color={new Color(0x777ff)} />\n        </mesh>\n      </group>\n    </>\n  );\n};\n\nconst NormalCubes = () => {\n  const [flat, setFlat] = useState(true);\n  const handleChange = (_: React.ChangeEvent, value: boolean) => {\n    setFlat(value);\n  };\n\n  const ref = useRef<MeshNormalMaterial>(null);\n\n  useEffect(() => {\n    if (ref.current) {\n      ref.current.flatShading = flat;\n      ref.current.needsUpdate = true;\n    }\n  }, [flat]);\n\n  return (\n    <>\n      <group position={[16, 8, 0]}>\n        <Html position={[-1, 0, 0]}>\n          <Typography variant=\"h5\"> Normal </Typography>\n          <Typography>flat shading</Typography>{\" \"}\n          <Switch checked={flat} onChange={handleChange} />\n        </Html>\n        <mesh>\n          <sphereBufferGeometry args={[8, 16, 16]} />\n          <meshNormalMaterial color={new Color(0x777ff)} ref={ref} />\n        </mesh>\n      </group>\n    </>\n  );\n};\n","/Users/haocen/Documents/ThreeJS/explore/src/components/Layouts/Flex.tsx",[],"/Users/haocen/Documents/ThreeJS/explore/src/pages/Snippet01.tsx",["78"],"import { Canvas, useThree } from \"react-three-fiber\";\nimport { OrbitControls } from \"drei\";\nimport { useSpring } from \"react-spring/three\";\nimport React from \"react\";\nimport { CubeTextureLoader, Vector3 } from \"three\";\nimport { PlaneAndAxis } from \"../components/PlanAndAxis\";\n\nconst Box: React.FC<{\n  position?: Vector3 | [x: number, y: number, z: number];\n}> = (props) => {\n  return (\n    <mesh {...props} scale={[1, 1, 1]}>\n      <boxBufferGeometry attach=\"geometry\" args={[4, 4, 4]} />\n      <meshStandardMaterial attach=\"material\" color=\"orange\" />\n    </mesh>\n  );\n};\nconst Controls = () => {\n  const { gl, camera } = useThree();\n\n  useSpring({\n    from: {\n      z: -50,\n    },\n    to: {\n      z: -10,\n    },\n    onChange: ({ z }: { z: number }) => {\n      camera.position.z = z;\n      // camera.updateProjectionMatrix()\n    },\n  });\n\n  return (\n    <OrbitControls\n      autoRotate\n      target={[0, 0, 0]}\n      args={[camera, gl.domElement]}\n    />\n  );\n};\n\nexport const Snippet01 = () => {\n  return (\n    <div style={{ height: \"100%\" }}>\n      <Canvas\n        colorManagement\n        camera={{\n          position: [0, -2, 300],\n        }}\n      >\n        <ambientLight />\n        <pointLight position={[10, 10, 10]} />\n        <pointLight position={[30, 10, -10]} intensity={0.5} />\n        <Box position={[0, 2, 0]} />\n        <Controls />\n        <SkyBox />\n      </Canvas>\n    </div>\n  );\n};\n\nconst SkyBox = () => {\n  const { scene } = useThree();\n  const loader = new CubeTextureLoader();\n  scene.background = loader.load(\n    [\n      `${process.env.PUBLIC_URL}/assets/textures/cubemap-parliament/posx.jpg`,\n      `${process.env.PUBLIC_URL}/assets/textures/cubemap-parliament/negx.jpg`,\n      `${process.env.PUBLIC_URL}/assets/textures/cubemap-parliament/posy.jpg`,\n      `${process.env.PUBLIC_URL}/assets/textures/cubemap-parliament/negy.jpg`,\n      `${process.env.PUBLIC_URL}/assets/textures/cubemap-parliament/posz.jpg`,\n      `${process.env.PUBLIC_URL}/assets/textures/cubemap-parliament/negz.jpg`,\n    ],\n    undefined,\n    undefined,\n    (e) => {\n      console.log(e);\n    }\n  );\n\n  return null;\n};\n",{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","severity":1,"message":"84","line":2,"column":17,"nodeType":"85","messageId":"86","endLine":2,"endColumn":25},{"ruleId":"83","severity":1,"message":"87","line":4,"column":36,"nodeType":"85","messageId":"86","endLine":4,"endColumn":42},{"ruleId":"83","severity":1,"message":"88","line":5,"column":23,"nodeType":"85","messageId":"86","endLine":5,"endColumn":35},{"ruleId":"83","severity":1,"message":"89","line":6,"column":24,"nodeType":"85","messageId":"86","endLine":6,"endColumn":33},{"ruleId":"83","severity":1,"message":"84","line":3,"column":18,"nodeType":"85","messageId":"86","endLine":3,"endColumn":26},{"ruleId":"83","severity":1,"message":"90","line":4,"column":16,"nodeType":"85","messageId":"86","endLine":4,"endColumn":20},{"ruleId":"83","severity":1,"message":"91","line":4,"column":42,"nodeType":"85","messageId":"86","endLine":4,"endColumn":58},{"ruleId":"83","severity":1,"message":"92","line":7,"column":9,"nodeType":"85","messageId":"86","endLine":7,"endColumn":15},{"ruleId":"83","severity":1,"message":"93","line":8,"column":10,"nodeType":"85","messageId":"86","endLine":8,"endColumn":19},{"ruleId":"83","severity":1,"message":"94","line":8,"column":21,"nodeType":"85","messageId":"86","endLine":8,"endColumn":29},{"ruleId":"83","severity":1,"message":"95","line":6,"column":9,"nodeType":"85","messageId":"86","endLine":6,"endColumn":21},"no-native-reassign",["96"],"no-negated-in-lhs",["97"],"@typescript-eslint/no-unused-vars","'useFrame' is defined but never used.","Identifier","unusedVar","'Switch' is defined but never used.","'CameraHelper' is defined but never used.","'useHelper' is defined but never used.","'Mesh' is defined but never used.","'MultiplyBlending' is defined but never used.","'Button' is defined but never used.","'useSpring' is defined but never used.","'animated' is defined but never used.","'PlaneAndAxis' is defined but never used.","no-global-assign","no-unsafe-negation"]